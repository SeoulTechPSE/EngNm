< q1
Import the numpy package under the name `np` (★☆☆)

< h1
hint: import … as

< a1
import numpy as np

< q2
Print the numpy version and the configuration (★☆☆)

< h2
hint: np.__version__, np.show_config()

< a2
print(np.__version__)
np.show_config()

< q3
Create a null vector of size 10 (★☆☆)

< h3
hint: np.zeros

< a3
z = np.zeros(10)
print(f'{z!r}')

< q4
How to find the memory size of any array (★☆☆)

< h4
hint: size, itemsize

< a4
z = np.zeros((10, 10))
print(f"{z.size*z.itemsize} bytes') or print(f'{z.nbytes} bytes')

< q5
How to get the documentation of the numpy add function from the command line? (★☆☆)

< h5
hint: np.info

< a5
!python -c "import numpy; numpy.info(numpy.add)"

< q6
Create a null vector of size 10 but the fifth value which is 1 (★☆☆)

< h6
hint: array[4]

< a6
z = np.zeros(10)
z[4] = 1
print(z)

< q7
Create a vector with values ranging from 10 to 49 (★☆☆)

< h7
hint: arange

< a7
z = np.arange(10, 50)
print(z)

< q8
Reverse a vector (first element becomes last) (★☆☆)

< h8
hint: array[::-1]

< a8
z = np.arange(10)
z = z[::-1]
print(z)

< q9
Create a 3x3 matrix with values ranging from 0 to 8 (★☆☆)

< h9
hint: reshape

< a9
z = np.arange(9).reshape(3, 3)
print(z)

< q10
Find indices of non-zero elements from [1,2,0,0,4,0] (★☆☆)

< h10
hint: np.nonzero

< a10
nz = np.nonzero([1,2,0,0,4,0])
print(nz)

< q11
Create a 3x3 identity matrix (★☆☆)

< h11
hint: np.eye

< a11
z = np.eye(3)
print(z)

< q12
Create a 3x3x3 array with random values (★☆☆)

< h12
hint: np.random.random

< a12
z = np.random.random((3, 3, 3))
print(z)

< q13
Create a 10x10 array with random values and find the minimum and maximum values (★☆☆)

< h13
hint: min, max

< a13
z = np.random.random((10, 10))
z_min, z_max = z.min(), z.max()
print(z_min, z_max)

< q14
Create a random vector of size 30 and find the mean value (★☆☆)

< h14
hint: mean

< a14
z = np.random.random(30)
m = z.mean()
print(m)

< q15
Create a 2d array with 1 on the border and 0 inside (★☆☆)

< h15
hint: array[1:-1, 1:-1]

< a15
z = np.ones((10, 10))
z[1:-1,1:-1] = 0
print(z)

< q16
How to add a border (filled with 0's) around an existing array? (★☆☆)

< h16
hint: np.pad

< a16
z = np.ones((5, 5))
z = np.pad(z, pad_width=1, mode='constant', constant_values=0)
print(z)

< q17
What is the result of the following expression? (★☆☆)
```python
0 * np.nan
np.nan == np.nan
np.inf > np.nan
np.nan - np.nan
np.nan in set([np.nan])
0.3 == 3 * 0.1
```

< h17
hint: NaN = not a number, inf = infinity

< a17
print(0 * np.nan, np.nan == np.nan, np.inf > np.nan)
print(np.nan - np.nan, np.nan in set([np.nan]), 0.3 == 3 * 0.1)

< q18
Create a 5x5 matrix with values 1,2,3,4 just below the diagonal (★☆☆)

< h18
hint: np.diag

< a18
z = np.diag(1 + np.arange(4), k=-1)
print(z)

< q19
Create a 8x8 matrix and fill it with a checkerboard pattern (★☆☆)

< h19
hint: array[::2]

< a19
z = np.zeros((8, 8), dtype=int)
z[1::2,::2] = 1
z[::2,1::2] = 1
print(z)

< q20
Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element?

< h20
hint: np.unravel_index

< a20
print(np.unravel_index(99, (6, 7, 8)))

< q21
Create a checkerboard 8x8 matrix using the tile function (★☆☆)

< h21
hint: np.tile

< a21
z = np.tile(np.array([[0,1],[1,0]]), (4, 4))
print(z)

< q22
Normalize a 5x5 random matrix (★☆☆)

< h22
hint: (x -mean)/std

< a22
z = np.random.random((5, 5))
z = (z - np.mean(z)) / (np.std(z))
print(z)

< q23
Create a custom dtype that describes a color as four unsigned bytes (RGBA) (★☆☆)

< h23
hint: np.dtype

< a23
color = np.dtype([("r", np.ubyte), ("g", np.ubyte), ("b", np.ubyte), ("a", np.ubyte)])

< q24
Multiply a 5x3 matrix by a 3x2 matrix (real matrix product) (★☆☆)

< h24
hint:

< a24
z = np.dot(np.ones((5, 3)), np.ones((3, 2)))
print(z)

# Alternative solution, in Python 3.5 and above
z = np.ones((5, 3)) @ np.ones((3, 2))
print(z)

< q25
Given a 1D array, negate all elements which are between 3 and 8, in place. (★☆☆)

< h25
hint: <=

< a25
# Author: Evgeni Burovski

z = np.arange(11)
z[(3 <= z) & (z <= 8)] *= -1
print(z)

< q26
What is the output of the following script? (★☆☆)
```python
print(sum(range(5), -1))
print(np.sum(range(5), -1))
```

< h26
hint: np.sum

< a26
# Author: Jake VanderPlas

print(sum(range(5), -1))
print(np.sum(range(5), -1))

< q27
Consider an integer vector z, which of these expressions are illegal? (★☆☆)
```python
z**z
2 << z >> 2
z <- z
1j*z
z/1
z < z > z
```

< h27
No hints provided...

< a27
z = np.arange(3)
print(z**z, 2 << z >> 2, z <- z, 1j*z, z/1)
print(z < z > z)

< q28
What are the result of the following expressions?
```python
np.array(0) / np.array(0)
np.array(0) // np.array(0)
np.array([np.nan]).astype(int).astype(float)
```

< h28
No hints provided...

< a28
print(np.array(0) / np.array(0))
print(np.array(0) // np.array(0))
print(np.array([np.nan]).astype(int).astype(float))

< q29
How to round away from zero a float array ? (★☆☆)

< h29
hint: np.uniform, np.copysign, np.ceil, np.abs

< a29
# Author: Charles R Harris

z = np.random.uniform(-10, +10, 10)
print(z)
print(np.copysign(np.ceil(np.abs(z)), z))

< q30
How to find common values between two arrays? (★☆☆)

< h30
hint: np.intersect1d

< a30
z1 = np.random.randint(0, 10, 10)
z2 = np.random.randint(0, 10, 10)
print(z1)
print(z2)
print(np.intersect1d(z1, z2))

< q31
How to ignore all numpy warnings (not recommended)? (★☆☆)

< h31
hint: np.seterr, np.errstate

< a31
# Suicide mode on
defaults = np.seterr(all="ignore")
z = np.ones(1) / 0

# Back to sanity
_ = np.seterr(**defaults)

< q32
Is the following expressions true? (★☆☆)
```python
np.sqrt(-1) == np.emath.sqrt(-1)
```

< h32
hint: imaginary number

< a32
np.sqrt(-1) == np.emath.sqrt(-1)

< q33
How to get the dates of yesterday, today and tomorrow? (★☆☆)

< h33
hint: np.datetime64, np.timedelta64

< a33
yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D')
today     = np.datetime64('today', 'D')
tomorrow  = np.datetime64('today', 'D') + np.timedelta64(1, 'D')
print(yesterday, today, tomorrow)

< q34
How to get all the dates corresponding to the month of March 2021? (★★☆)

< h34
hint: np.arange(dtype=datetime64['D'])

< a34
z = np.arange('2021-03', '2021-04', dtype='datetime64[D]')
print(z)

< q35
How to compute ((a+b)*(-a/2)) in place (without copy)? (★★☆)

< h35
hint: np.add(out=), np.negative(out=), np.multiply(out=), np.divide(out=)

< a35
a = np.full(3, 1.0)
b = np.full(3, 2.0)
print(id(a))

np.add(a, b, out=b)
np.divide(a, 2, out=a)
np.negative(a, out=a)
np.multiply(a, b, out=a)
print(id(a))

< q36
Extract the integer part of a random array of positive numbers using 4 different methods (★★☆)

< h36
hint: %, np.floor, astype, np.trunc

< a36
z = np.random.uniform(0, 10, 10)

print (z - z % 1)
print (np.floor(z))
print (z.astype(int))
print (np.trunc(z))

< q37
Create a 5x5 matrix with row values ranging from 0 to 4 (★★☆)

< h37
hint: np.arange

< a37
z = np.zeros((5, 5))
z += np.arange(5)
print(z)

< q38
Consider a generator function that generates 10 integers and use it to build an array (★☆☆)

< h38
hint: np.fromiter

< a38
def generate():
    for x in range(10):
        yield x
z = np.fromiter(generate(), dtype=int)
print(z)

< q39
Create a vector of size 10 with values ranging from 0 to 1, both excluded (★★☆)

< h39
hint: np.linspace

< a39
z = np.linspace(0, 1, 11, endpoint=False)[1:]
print(z)

< q40
Create a random vector of size 10 and sort it (★★☆)

< h40
hint: sort

< a40
z = np.random.random(10)
z.sort()
print(z)

< q41
How to sum a small array faster than np.sum? (★★☆)

< h41
hint: np.add.reduce, see numpy.ufunc.reduce

< a41
# Author: Evgeni Burovski

z = np.arange(10)
np.add.reduce(z)

< q42
Consider two random array a and b, check if they are equal (★★☆)

< h42
hint: np.allclose, np.array_equal

< a42
a = np.random.randint(0, 2, 3)
b = np.random.randint(0, 2, 3)
print(a, b)

# Assuming identical shape of the arrays and a tolerance for the comparison of values
equal = np.allclose(a, b)
print(equal)

# Checking both the shape and the element values, no tolerance (values have to be exactly equal)
equal = np.array_equal(a, b)
print(equal)

< q43
Make an array immutable(read-only) (★★☆)

< h43
hint: flags.writeable

< a43
z = np.zeros(10)
z.flags.writeable = False
z[0] = 1

< q44
Consider a random 5x2 matrix representing cartesian coordinates, convert them to polar coordinates (★★☆)

< h44
hint: np.sqrt, np.arctan2

< a44
z = np.random.random((5, 2))
x, y = z[:,0], z[:,1]
r = np.sqrt(x**2 + y**2)
t = np.arctan2(y, x)
print(r)
print(t)

< q45
Create random vector of size 10 and replace the maximum value by 0 (★★☆)

< h45
hint: argmax

< a45
z = np.random.random(10)
z[z.argmax()] = 0
print(z)

< q46
Create a structured array with `x` and `y` coordinates covering the [0,1]x[0,1] area (★★☆)

< h46
hint: np.meshgrid

< a46
z = np.zeros((5, 5), [('x', float), ('y', float)])
z['x'], z['y'] = np.meshgrid(np.linspace(0,1,5), np.linspace(0,1,5))
print(z)

< q47
Given two arrays, x and y, construct the Cauchy matrix c (c_ij =1/(x_i - y_j))

< h47
hint: np.subtract.outer, see numpy.ufunc.outer

< a47
# Author: Evgeni Burovski

x = np.arange(8)
y = x + 0.5
c = 1.0 / np.subtract.outer(x, y)
print(c)

< q48
Print the minimum and maximum representable value for each numpy scalar type (★★☆)

< h48
hint: np.iinfo, np.finfo, eps

< a48
for dtype in [np.int8, np.int32, np.int64]:
   print(np.iinfo(dtype).min)
   print(np.iinfo(dtype).max)
   
for dtype in [np.float32, np.float64]:
   print(np.finfo(dtype).min)
   print(np.finfo(dtype).max)
   print(np.finfo(dtype).eps)

< q49
How to print all the values of an array? (★★☆)

< h49
hint: np.set_printoptions

< a49
z = np.zeros((5, 20))
np.set_printoptions(threshold=50)
print(z)
np.set_printoptions(threshold=1000)
print(z)

< q50
How to find the closest value (to a given scalar) in a vector? (★★☆)

< h50
hint: argmin

< a50
z = np.arange(100)
v = np.random.uniform(0, 100)
index = (np.abs(z - v)).argmin()
print(z[index], v)

< q51
Create a structured array representing a position (x, y) and a color (r, g, b) (★★☆)

< h51
hint: dtype

< a51
z = np.zeros(10, [('position', [('x', float), ('y', float)]),
                  ('color',    [('r', float), ('g', float), ('b', float)])])
print(z[0])

z[0] = ((1, 2), (3, 4, 5))
print(z[0])

< q52
Consider a random vector with shape (100, 2) representing coordinates, find point by point distances (★★☆)

< h52
hint: np.atleast_2d, T, np.sqrt

< a52
z = np.random.random((100, 2))
x, y = np.atleast_2d(z[:, 0], z[:, 1])
d = np.sqrt((x - x.T)**2 + (y - y.T)**2)
print(d, d.shape)

# Much faster with scipy
import scipy.spatial
d = scipy.spatial.distance.cdist(z, z)
print(d, d.shape)

< q53
How to convert a float(32 bits) array into an integer(32 bits) in place?

< h53
hint: view and [:] =

< a53
# Thanks Vikas (https://stackoverflow.com/a/10622758/5989906)
z = (np.random.rand(5)*100).astype(np.float32)
print(z)
y = z.view(np.int32)
print(y)
y[:] = z
print(y)

< q54
How to read the following file? (★★☆)
```
1, 2, 3, 4, 5
6,  ,  , 7, 8
 ,  , 9,10,11
```

< h54
hint: np.genfromtxt

< a54
from io import StringIO

# Fake file
s = StringIO('''1, 2, 3, 4, 5
                6,  ,  , 7, 8
                 ,  , 9,10,11''')
z = np.genfromtxt(s, delimiter=',', dtype=np.int)
print(z)

< q55
What is the equivalent of enumerate for numpy arrays? (★★☆)

< h55
hint: np.ndenumerate, np.ndindex

< a55
z = np.arange(9).reshape(3, 3)
for index, value in np.ndenumerate(z):
    print(index, value, end=', ')

print()
for index in np.ndindex(z.shape):
    print(index, z[index], end=', ')

< q56
Generate a generic 2D Gaussian-like array (★★☆)

< h56
hint: np.meshgrid, np.exp

< a56
X, Y = np.meshgrid(np.linspace(-1, 1, 6), np.linspace(-1, 1, 6))
d = np.sqrt(X*X + Y*Y)
sigma, mu = 1.0, 0.0

g = np.exp(-((d - mu)**2 / (2.0 * sigma**2)))
print(g)

< q57
How to randomly place p elements in a 2D array? (★★☆)

< h57
hint: np.put, np.random.choice

< a57
# Author: Divakar

n = 10
p = 5
z = np.zeros((n, n))
np.put(z, np.random.choice(range(n*n), p, replace=False), 5)
print(z)

< q58
Subtract the mean of each row of a matrix (★★☆)

< h58
hint: mean(axis=, keepdims=)

< a58
# Author: Warren Weckesser

x = np.random.rand(5, 5)
y = x - x.mean(axis=1, keepdims=True)
print(y)

< q59
How to sort an array by the n-th column? (★★☆)

< h59
hint: argsort

< a59
# Author: Steve Tjoa

z = np.random.randint(0, 10, (3, 3))
print(z)
n = 1
print(z[z[:, n].argsort()])

< q60
How to tell if a given 2D array has null columns? (★★☆)

< h60
hint: any, ~

< a60
# Author: Warren Weckesser

z = np.random.randint(0, 3, (3, 10))
print(z)
print((~z.any(axis=0)).any())

< q61
Find the nearest value from a given value in an array (★★☆)

< h61
hint: np.abs, argmin, flat

< a61
z = np.random.uniform(0, 1, (3, 4))
print(z)
x = 0.5
m = z.flat[np.abs(z - x).argmin()]
print(m)

< q62
Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (★★☆)

< h62
hint: np.nditer

< a62
a = np.arange(3).reshape(3, 1)
b = np.arange(3).reshape(1, 3)
it = np.nditer([a, b, None])
for x, y, z in it: 
    z[...] = x + y
print(it.operands[2])

< q63
Create an array class that has a name attribute (★★☆)

< h63
hint: class method

< a63
class NamedArray(np.ndarray):

    def __new__(cls, array, name='no_name'):
        obj = np.asarray(array).view(cls)
        obj.name = name
        return obj

z = NamedArray(np.arange(10), 'range10')
print(z.name)

< q64
Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (★★★)

< h64
hint: np.bincount | np.add.at

< a64
z = np.ones(10)
i = np.random.randint(0, len(z), 20)
z += np.bincount(i, minlength=len(z))
print(i, '=>', z)

# Author: Bartosz Telenczuk
z = np.ones(10)
i = np.random.randint(0, len(z), 20)
np.add.at(z, i, 1)
print(i, '=>', z)

< q65
How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (★★★)

< h65
hint: np.bincount

< a65
# Author: Alan G Isaac

x = [1, 2, 3, 4, 5, 6]
i = [1, 3, 9, 3, 4, 1]
f = np.bincount(i, x)
print(f)

< q66
Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (★★★)

< h66
hint: np.unique

< a66
# Author: Nadav Horesh

w, h = 2, 3
i = np.random.randint(0, 2, (w, h, 3)).astype(np.ubyte)
print(i)
f = i[..., 0]*256**2 + i[..., 1]*256 + i[..., 2]
print(f)
print(len(np.unique(f)))

< q67
Considering a four dimensions array, how to get sum over the last two axis at once? (★★★)

< h67
hint: sum(axis=(-2, -1))

< a67
a = np.random.randint(0, 10, (2, 3, 2, 3))

# solution by passing a tuple of axes (introduced in numpy 1.7.0)
sum = a.sum(axis=(-2, -1))
print(sum)

# solution by flattening the last two dimensions into one useful for functions that don't accept tuples for axis argument
sum = a.reshape(a.shape[:-2] + (-1,)).sum(axis=-1)
print(sum)

< q68
Considering a one-dimensional vector d, how to compute means of subsets of d using a vector s of same size describing subset indices? (★★★)

< h68
hint: np.bincount

< a68
# Author: Jaime Fernández del Río

d = np.random.uniform(0, 1, 30)
s = np.random.randint(0, 3, 30)
d_sums = np.bincount(s, weights=d)
d_counts = np.bincount(s)
d_means = d_sums / d_counts
print(d_means)

import pandas as pd  # Pandas solution as a reference due to more intuitive code
print(pd.Series(d).groupby(s).mean())

< q69
How to get the diagonal of a dot product? (★★★)

< h69
hint: np.diag

< a69
# Author: Mathieu Blondel
a = np.random.uniform(0, 1, (3, 3))
b = np.random.uniform(0, 1, (3, 3))

print(np.diag(np.dot(a, b)))        # Slow version 
print(np.sum(a * b.T, axis=1))      # Fast version
print(np.einsum("ij,ji->i", a, b))  # Faster version

< q70
Consider the vector [1, 2, 3, 4, 5], how to build a new vector with 3 consecutive zeros interleaved between each value? (★★★)

< h70
hint: array[::4]

< a70
# Author: Warren Weckesser

z = np.array([1, 2, 3, 4, 5])
nz = 3
z0 = np.zeros(len(z) + (len(z)-1)*(nz))
z0[::nz+1] = z
print(z0)

< q71
Consider an array of dimension (5, 5, 3), how to mulitply it by an array with dimensions (5,5)? (★★★)

< h71
hint: array[:, :, None]

< a71
a = np.ones((5, 5, 3))
b = 2*np.ones((5, 5))
print(a * b[:,:,None])

< q72
How to swap two rows of an array? (★★★)

< h72
hint: array[[]] = array[[]]

< a72
# Author: Eelco Hoogendoorn

a = np.arange(25).reshape(5, 5)
a[[0, 1]] = a[[1, 0]]
print(a)

< q73
Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the triangles (★★★)

< h73
hint: repeat, np.roll, np.sort, view, np.unique

< a73
# Author: Nicolas P. Rougier

faces = np.random.randint(0, 100, (10, 3))
f = np.roll(faces.repeat(2, axis=1), -1, axis=1)
f = f.reshape(len(f)*3, 2)
f = np.sort(f, axis=1)
g = f.view(dtype=[('p0', f.dtype), ('p1', f.dtype)])
g = np.unique(g)
print(g)

< q74
Given an array c that is a bincount, how to produce an array a such that np.bincount(a) == c? (★★★)

< h74
hint: np.repeat

< a74
# Author: Jaime Fernández del Río

c = np.bincount([1, 1, 2, 3, 4, 4, 6])
a = np.repeat(np.arange(len(c)), c)
print(a)

< q75
How to compute averages using a sliding window over an array? (★★★)

< h75
hint: np.cumsum

< a75
# Author: Jaime Fernández del Río

def moving_average(a, n=3) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n-1:] / n
z = np.arange(20)
print(moving_average(z, n=3))

< q76
Consider a one-dimensional array z, build a two-dimensional array whose first row is (z[0],z[1],z[2]) and each subsequent row is shifted by 1 (last row should be (z[-3],z[-2],z[-1]) (★★★)

< h76
hint: from numpy.lib import stride_tricks

< a76
# Author: Joe Kington / Erik Rigtorp
from numpy.lib import stride_tricks

def rolling(a, window):
    shape = (a.size - window + 1, window)
    strides = (a.itemsize, a.itemsize)
    return stride_tricks.as_strided(a, shape=shape, strides=strides)
z = rolling(np.arange(10), 3)
print(z)

< q77
How to negate a boolean, or to change the sign of a float inplace? (★★★)

< h77
hint: np.logical_not, np.negative

< a77
# Author: Nathaniel J. Smith

z = np.random.randint(0, 2, 100)
np.logical_not(z, out=z)

z = np.random.uniform(-1.0,1.0,100)
np.negative(z, out=z)

< q78
Consider 2 sets of points p0, p1 describing lines (2d) and a point p, how to compute distance from p to each line i (p0[i],p1[i])? (★★★)

< h78
No hints provided...

< a78
def distance(p0, p1, p):
    t = p1 - p0
    s = (t**2).sum(axis=1)
    u = -((p0[:,0] - p[...,0])*t[:,0] + (p0[:,1] - p[...,1])*t[:,1]) / s
    u = u.reshape(len(u), 1)
    d = p0 + u*t - p
    return np.sqrt((d**2).sum(axis=1))

p0 = np.random.uniform(-10, 10, (10, 2))
p1 = np.random.uniform(-10, 10, (10, 2))
p  = np.random.uniform(-10, 10, ( 1, 2))
print(distance(p0, p1, p))

< q79
Consider 2 sets of points p0, p1 describing lines (2d) and a set of points p, how to compute distance from each point j (p[j]) to each line i (p0[i],p1[i])? (★★★)

< h79
No hints provided...

< a79
# Author: Italmassov Kuanysh
# based on distance function from previous question

p0 = np.random.uniform(-10, 10, (5, 2))
p1 = np.random.uniform(-10, 10, (5, 2))
p = np.random.uniform(-10, 10, (5, 2))
print(np.array([distance(p0, p1, p_i) for p_i in p]))

< q80
Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a `fill` value when necessary) (★★★)

< h80
hint: minimum, maximum

< a80
# Author: Nicolas Rougier
def extract(z, position, shape, fill='0'):
    zs = np.array(z.shape, dtype='int')
    p = np.array(position, dtype='int')
    r = np.full(shape, fill, dtype=z.dtype)
    rs = np.array(r.shape, dtype='int')

    z_start = (p - rs // 2)
    z_stop  = (p + rs // 2) + rs % 2

    r_start = (np.zeros(len(shape), dtype='int') - np.minimum(z_start, 0)).tolist()
    r_stop = np.maximum(r_start, (rs - np.maximum(z_stop - zs, 0))).tolist()
    z_start = np.maximum(z_start, 0).tolist()
    z_stop = np.minimum(z_stop, zs).tolist()

    ri = tuple(slice(start, stop) for start, stop in zip(r_start, r_stop))
    zi = tuple(slice(start, stop) for start, stop in zip(z_start, z_stop))
    r[ri] = z[zi]
    
    return r

z = np.random.randint(0, 10, (5, 5))
print(z)
print(extract(z, position=(4, 4), shape=(3, 3)))

< q81
Consider an array z = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], how to generate an array r = [[1,2,3,4], [2,3,4,5], [3,4,5,6], ..., [11,12,13,14]]? (★★★)

< h81
hint: np.lib.stride_tricks.as_strided

< a81
# Author: Stefan van der Walt

z = np.arange(1, 15, dtype=np.uint32)
r = np.lib.stride_tricks.as_strided(z, (11, 4), (4, 4))
print(r)

< q82
Compute a matrix rank (★★★)

< h82
hint: np.linalg.svd

< a82
# Author: Stefan van der Walt

z = np.random.uniform(0, 1, (10, 10))
u, s, v = np.linalg.svd(z) # Singular Value Decomposition
rank = np.sum(s > 1e-10)
print(rank)

< q83
How to find the most frequent value in an array?

< h83
hint: np.bincount, argmax

< a83
z = np.random.randint(0, 10, 50)
print(np.bincount(z).argmax())

< q84
Extract all the contiguous 3x3 blocks from a random 10x10 matrix (★★★)

< h84
hint: np.lib.stride_tricks.as_strided

< a84
# Author: Chris Barker

z = np.random.randint(0, 5, (10, 10))
n = 3
i = 1 + (z.shape[0] - 3)
j = 1 + (z.shape[1] - 3)
c = np.lib.stride_tricks.as_strided(z, shape=(i, j, n, n), strides=z.strides + z.strides)
print(c)

< q85
Create a 2D array subclass such that z[i,j] == z[j,i] (★★★)

< h85
hint: class method

< a85
# Author: Eric O. Lebigot
# Note: only works for 2d array and value setting using indices

class Symetric(np.ndarray):
    def __setitem__(self, index, value):
        i, j = index
        super(Symetric, self).__setitem__((i, j), value)
        super(Symetric, self).__setitem__((j, i), value)

def symetric(z):
    return np.asarray(z + z.T - np.diag(z.diagonal())).view(Symetric)

s = symetric(np.random.randint(0, 10, (5, 5)))
s[2, 3] = 42
print(s)

< q86
Consider a set of p matrices with shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1)) (★★★)

< h86
hint: np.tensordot

< a86
# Author: Stefan van der Walt

p, n = 4, 3
m = np.ones((p, n, n))
v = np.ones((p, n, 1))
s = np.tensordot(m, v, axes=[[0, 2], [0, 1]])
print(s)

< q87
Consider a 16x16 array, how to get the block-sum (block size is 4x4)? (★★★)

< h87
hint: np.add.reduceat

< a87
# Author: Robert Kern

z = np.ones((16, 16))
k = 4
s = np.add.reduceat(np.add.reduceat(z, np.arange(0, z.shape[0], k), axis=0),
                                       np.arange(0, z.shape[1], k), axis=1)
print(s)

< q88
How to implement the Game of Life using numpy arrays? (★★★)

< h88
No hints provided...

< a88
# Author: Nicolas Rougier

def iterate(z):
    # Count neighbours
    n = (z[0:-2, 0:-2] + z[0:-2, 1:-1] + z[0:-2, 2:] +
         z[1:-1, 0:-2]                 + z[1:-1, 2:] +
         z[2:  , 0:-2] + z[2:  , 1:-1] + z[2:  , 2:])

    # Apply rules
    birth = (n==3) & (z[1:-1, 1:-1]==0)
    survive = ((n==2) | (n==3)) & (z[1:-1, 1:-1]==1)
    z[...] = 0
    z[1:-1, 1:-1][birth | survive] = 1
    return z

z = np.random.randint(0, 2, (50, 50))
for i in range(100): z = iterate(z)
print(z)

< q89
How to get the n largest values of an array (★★★)

< h89
hint: np.argsort | np.argpartition

< a89
z = np.arange(10000)
np.random.shuffle(z)
n = 5

print (z[np.argsort(z)[-n:]])  # Slow
print (z[np.argpartition(-z, n)[:n]])  # Fast

< q90
Given an arbitrary number of vectors, build the cartesian product (every combinations of every item) (★★★)

< h90
hint: np.indices

< a90
# Author: Stefan Van der Walt

def cartesian(arrays):
    arrays = [np.asarray(a) for a in arrays]
    shape = (len(x) for x in arrays)

    ix = np.indices(shape, dtype=int)
    ix = ix.reshape(len(arrays), -1).T

    for n, arr in enumerate(arrays):
        ix[:, n] = arrays[n][ix[:, n]]

    return ix

print (cartesian(([1, 2, 3], [4, 5], [6, 7])))

< q91
How to create a record array from a regular array? (★★★)

< h91
hint: np.core.records.fromarrays

< a91
z = np.array([("Hello", 2.5, 3), ("World", 3.6, 2)])
r = np.core.records.fromarrays(z.T, names='col1, col2, col3', formats = 'S8, f8, i8')
print(r)

< q92
Consider a large vector z, compute z to the power of 3 using 3 different methods (★★★)

< h92
hint: np.power, *, np.einsum

< a92
# Author: Ryan G.

x = np.random.rand(int(5e7))

%timeit np.power(x,3)
%timeit x*x*x
%timeit np.einsum('i,i,i->i',x,x,x)

< q93
Consider two arrays a and b of shape (8,3) and (2,2). How to find rows of a that contain elements of each row of b regardless of the order of the elements in b? (★★★)

< h93
hint: np.where

< a93
# Author: Gabe Schwartz

a = np.random.randint(0, 5, (8, 3))
b = np.random.randint(0, 5, (2, 2))
print(a)
print(b)

c = (a[..., np.newaxis, np.newaxis] == b)
rows = np.where(c.any((3,1)).all(1))[0]
print(rows)

< q94
Considering a 10x3 matrix, extract rows with unequal values (e.g. [0,0,1]) (★★★)

< h94
No hints provided...

< a94
# Author: Robert Kern

z = np.random.randint(0, 2, (10, 3))
print(z)

# solution for arrays of all dtypes (including string arrays and record arrays)
e = np.all(z[:,1:] == z[:,:-1], axis=1)
u = z[~e]
print(u)

# soluiton for numerical arrays only, will work for any number of columns in z
u = z[z.max(axis=1) != z.min(axis=1), :]
print(u)

< q95
Convert a vector of ints into a matrix binary representation (★★★)

< h95
hint: np.unpackbits

< a95
# Author: Warren Weckesser

i = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128])
b = ((i.reshape(-1, 1) & (2**np.arange(8))) != 0).astype(int)
print(b[:,::-1])

# Author: Daniel T. McDonald

i = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128], dtype=np.uint8)
print(np.unpackbits(i[:, np.newaxis], axis=1))

< q96
Given a two dimensional array, how to extract unique rows? (★★★)

< h96
hint: np.ascontiguousarray | np.unique

< a96
# Author: Jaime Fernández del Río

z = np.random.randint(0, 2, (6, 3))
print(z)

t = np.ascontiguousarray(z).view(np.dtype((np.void, z.dtype.itemsize * z.shape[1])))
_, idx = np.unique(t, return_index=True)
uz = z[idx]
print(uz)

# Author: Andreas Kouzelis
# NumPy >= 1.13
uz = np.unique(z, axis=0)
print(uz)

< q97
Considering 2 vectors a & b, write the einsum equivalent of inner, outer, sum, and mul function (★★★)

< h97
hint: np.einsum

< a97
# Author: Alex Riley
# Make sure to read: http://ajcr.net/Basic-guide-to-einsum/

a = np.random.randint(0, 5, 3)
b = np.random.randint(0, 5, 3)
print(a)
print(b)

print(np.einsum('i->', a))        # np.sum(a)
print(np.einsum('i,i->i', a, b))  # a * b
print(np.einsum('i,i', a, b))     # np.inner(a, b)
print(np.einsum('i,j->ij', a, b)) # np.outer(a, b)

< q98
Considering a path described by two vectors (x,y), how to sample it using equidistant samples (★★★)?

< h98
hint: np.cumsum, np.interp

< a98
# Author: Bas Swinckels

phi = np.arange(0, 10*np.pi, 0.1)
a = 1
x = a*phi*np.cos(phi)
y = a*phi*np.sin(phi)

dr = (np.diff(x)**2 + np.diff(y)**2)**.5 # segment lengths
r = np.zeros_like(x)
r[1:] = np.cumsum(dr)                # integrate path
r_int = np.linspace(0, r.max(), 200) # regular spaced path
x_int = np.interp(r_int, r, x)       # integrate path
y_int = np.interp(r_int, r, y)

import matplotlib.pyplot as plt

plt.plot(r_int, x_int, 'ro')
plt.plot(r_int, y_int, 'bx')
plt.xlabel('$r$')
plt.ylabel('$x, y$')
plt.show()

< q99
Given an integer n and a 2D array x, select from x the rows which can be interpreted as draws from a multinomial distribution with n degrees, i.e., the rows which only contain integers and which sum to n. (★★★)

< h99
hint: np.logical_and.reduce, np.mod

< a99
# Author: Evgeni Burovski

x = np.asarray([[1.0, 0.0, 3.0, 8.0],
                [2.0, 0.0, 1.0, 1.0],
                [1.5, 2.5, 1.0, 0.0],
                [1.0, 1.0, 1.0, 1.0]])
n = 4

m = np.logical_and.reduce(np.mod(x, 1) == 0, axis=-1)
m &= (x.sum(axis=-1) == n)
print(x[m])

< q100
Compute bootstrapped 95% confidence intervals for the mean of a 1D array x (i.e., resample the elements of an array with replacement n times, compute the mean of each sample, and then compute percentiles over the means). (★★★)

< h100
hint: np.percentile

< a100
# Author: Jessica B. Hamrick

x = np.random.randn(100)  # random 1D array
n = 1000                  # number of bootstrap samples
idx = np.random.randint(0, x.size, (n, x.size))
means = x[idx].mean(axis=1)
confint = np.percentile(means, [2.5, 97.5])
print(confint)
